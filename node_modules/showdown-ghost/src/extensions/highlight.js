/* jshint node:true, browser:true, -W044 */

// Adds highlight syntax as per RedCarpet:
//
// https://github.com/vmg/redcarpet
//
// This is ==highlighted==. It looks like this: <mark>highlighted</mark>

(function () {
    var highlight = function () {
        return [
            {
                type: 'html',
                filter: function (text) {
                    var highlightRegex = /(=){2}([\s\S]+?)(=){2}/gim,
                        preExtractions = {},
                        codeExtractions = {},
                        scriptExtractions = {},
                        hashID = 0;

                    function hashId() {
                        return hashID += 1;
                    }

                    // Extract pre blocks
                    text = text.replace(/<pre>[\s\S]*?<\/pre>/gim, function (x) {
                        var hash = hashId();
                        preExtractions[hash] = x;
                        return '{gfm-js-extract-pre-' + hash + '}';
                    }, 'm');

                    // Extract code blocks
                    text = text.replace(/<code>[\s\S]*?<\/code>/gim, function (x) {
                        var hash = hashId();
                        codeExtractions[hash] = x;
                        return '{gfm-js-extract-code-' + hash + '}';
                    }, 'm');
                    
                    text = text.replace(/<script\s*.*>[\s\S]*?<\/script>/gim, function (x) {
                        var hash = hashId();
                        scriptExtractions[hash] = x;
                        return '{gfm-js-extract-code-' + hash + '}';
                    }, 'm');

                    text = text.replace(highlightRegex, function (match, n, content) {
                        // Check the content isn't just an `=`
                        if (!/^=+$/.test(content)) {
                            return '<mark>' + content + '</mark>';
                        }

                        return match;
                    });

                    // replace pre extractions
                    text = text.replace(/\{gfm-js-extract-pre-([0-9]+)\}/gm, function (x, y) {
                        return preExtractions[y];
                    });

                    // replace code extractions
                    text = text.replace(/\{gfm-js-extract-code-([0-9]+)\}/gm, function (x, y) {
                        return codeExtractions[y];
                    });
                    var regex = /<pre><code class="(.*?)">([\s\S]*?)<\/code><\/pre>/g;
                    var result;
                    var Prism = require('prismjs') ;
                    while ((result = regex.exec(text)) !== null) {
                        // get the extracted class name and code
                        var className = result[1];
                        var code      = result[2];
                        
                        // lower case the class name so case does not matter
                        className = className.toLowerCase();
                        
                        // dencode HTML entities encoded by showdown
                        // the opposite of replacements taken from showdown's _EncodeCode
                        code = code.replace(/&lt;/g,"<");
                        code = code.replace(/&gt;/g,">");
                        code = code.replace(/&amp;/g,"&");
			
                      
                        // highlight the code with prism
                        // get the grammar (language supported by prism) from the class name
                        var grammar = Prism.languages[className];
                        
                        if (!grammar) {
                            // the given class name is not a language supported by prism
                            // skip to the next code block
                            continue;
                        }
                        
                        // the class name is a valid language
                        var language = className;
                        
                        // do the highlighting
                        var highlightedCode = Prism.highlight(code, grammar, language);
                        
                        // create the new HTML with the highlighted code and language class
                        // Prism moves the language class from the <code> element to the <pre> element
                        //  so we will set the class on the <pre> element
                        var newHTML = '<pre class="language-' + language + '"><code class="language-' + language +'">' + highlightedCode + '</code></pre>';
                        
                        
                        // replace the old HTML with the new HTML
                        var oldHTML      = result[0];
                        var oldHTMLIndex = result.index;
                        
                        var beforeOldHTML = text.substring(0, oldHTMLIndex);
                        var afterOldHTML  = text.substring(oldHTMLIndex + oldHTML.length);
                        text = beforeOldHTML + newHTML + afterOldHTML;}

                    return text;
                }
            }
        ];
    };

    // Client-side export
    if (typeof window !== 'undefined' && window.Showdown && window.Showdown.extensions) {
        window.Showdown.extensions.highlight = highlight;
    }
    // Server-side export
    if (typeof module !== 'undefined') {
        module.exports = highlight;
    }
}());
